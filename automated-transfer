#!/bin/sh

set -e

already_running()
{
	local pid_filename=$1
	shift

	local pid

	if [ -e "$pid_filename" ]; then
		read pid <"$pid_filename"
		if kill -0 "$pid"; then
			echo "$pid"
			return 0
		fi

		rm -f "$pid_filename"
	fi
	set -o noclobber
	if ! echo "$$" >"$pid_filename"; then
		read pid <"$pid_filename"
		echo "$pid"
		return 0
	fi
	set +o noclobber

	return 1
}

do_rsync()
{
	twofactor-wrapper rsync "$@"
}

progname="$(basename "$0")"
usage="Usage: $progname [-c CONFIG_FILE] [-h] [-v]"

config_file=./automated-transfer.conf
verbose=0
OPTIND=1
while getopts :c:hv opt; do
	case $opt in
	c)
		config_file="$OPTARG"

		# Add a leading './' if the config file isn't an absolute
		# path, so '. $config_file' can source it later on.
		if [ "${config_file#/}" = "$config_file" ]; then
			config_file="./$config_file"
		fi
		;;
	h)
		echo "$usage"
		exit 0
		;;
	v)
		verbose=1
		;;
	esac
done
shift $(($OPTIND - 1))

if [ $# -gt 0 ]; then
	echo "$usage"
	exit 1
fi

. "$config_file"

if [ -z "$FROM" ] || [ -z "$TO" ]; then
	echo "$(basename "$0"): FROM and TO must be set in automated-transfer.conf." 1>&2
	exit 1
fi

if [ -n "$SECRET" ]; then
	export TWOFACTOR_SECRET="$SECRET"
elif [ -n "$SECRET_PATH" ]; then
	export TWOFACTOR_SECRET_PATH="$SECRET_PATH"
else
	echo "$(basename "$0"): SECRET or SECRET_PATH must be set in automated-transfer.conf." 1>&2
	exit 1
fi

if [ -z "$USER" ]; then
	echo "$(basename "$0"): USER must be set in automated-transfer.conf." 1>&2
	exit 1
fi

if [ -z "$PASSWORD" ]; then
	echo "$(basename "$0"): PASSWORD must be set in automated-transfer.conf." 1>&2
	exit 1
fi
export TWOFACTOR_PASSWORD="$PASSWORD"

state_files_base="$config_file"
state_files_base="${state_files_base%.conf}"

if pid=$(already_running "$state_files_base.pid"); then
	echo "Another $progname is already running as PID $pid, exiting this new invocation..."
	exit 1
fi
trap 'rm -f "$state_files_base.pid"' EXIT

# If there's no colon, it must be a bare hostname. Add a trailing colon.
if [ "${TO#*:}" = "$TO" ]; then
	TO="$TO:"
fi

# The two-factor wrapper might not be in $PATH, but it might be in the same
# directory as this script.
export PATH="$PATH:$(dirname "$0")"

echo "Starting transfer ($config_file) at $(date)" >>"$state_files_base.log"

# A neutral, non-UTF8 $LANG like en_US is critical here, or expect's TTYs
# will do unseemly things to the binary protocol being used by rsync.
if [ $verbose -eq 0 ]; then
	do_rsync -avv --partial $RSYNC_EXTRA_OPTS "$FROM" "$USER@$TO" \
		>>"$state_files_base.log"
else
	do_rsync -avv --partial --progress $RSYNC_EXTRA_OPTS "$FROM" "$USER@$TO"
fi

# Copy the logs and a timestamp file to the remote host.
sleep "${REUSE_INTERVAL:-0}"
date >"$state_files_base.last-xfer"
do_rsync -a --partial "$state_files_base.log" "$state_files_base.last-xfer" \
	$RSYNC_OTHER_LOGS "$USER@$TO"
